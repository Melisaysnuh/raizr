"""
This type stub file was generated by pyright.
"""

import asyncio
import selectors
import sys
import warnings
import zmq as _zmq
from asyncio import Future, SelectorEventLoop
from weakref import WeakKeyDictionary
from zmq import _future

"""AsyncIO support for zmq

Requires asyncio and Python 3.
"""
_selectors: WeakKeyDictionary = ...
class ProactorSelectorThreadWarning(RuntimeWarning):
    """Warning class for notifying about the extra thread spawned by tornado

    We automatically support proactor via tornado's AddThreadSelectorEventLoop"""
    ...


if sys.platform == "win32":
    ...
else:
    _get_selector = ...
class _AsyncIO:
    _Future = Future
    _WRITE = selectors.EVENT_WRITE
    _READ = selectors.EVENT_READ


class Poller(_AsyncIO, _future._AsyncPoller):
    """Poller returning asyncio.Future for poll results."""
    ...


class Socket(_AsyncIO, _future._AsyncSocket):
    """Socket returning asyncio Futures for send/recv/poll methods."""
    _poller_class = Poller


class Context(_zmq.Context[Socket]):
    """Context for creating asyncio-compatible Sockets"""
    _socket_class = ...
    _instance = ...
    def __init__(self: Context, io_threads: int | _zmq.Context = ..., shadow: _zmq.Context | int = ...) -> None:
        ...
    


class ZMQEventLoop(SelectorEventLoop):
    """DEPRECATED: AsyncIO eventloop using zmq_poll.

    pyzmq sockets should work with any asyncio event loop as of pyzmq 17.
    """
    def __init__(self, selector=...) -> None:
        ...
    


_loop = ...
def install(): # -> None:
    """DEPRECATED: No longer needed in pyzmq 17"""
    ...

__all__ = ["Context", "Socket", "Poller", "ZMQEventLoop", "install"]
