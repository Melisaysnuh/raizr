"""
This type stub file was generated by pyright.
"""

import io
import socket
import ssl
import typing
from ..exceptions import ProxySchemeUnsupported
from typing_extensions import Self
from .ssl_ import _TYPE_PEER_CERT_RET, _TYPE_PEER_CERT_RET_DICT

if typing.TYPE_CHECKING:
    ...
_WriteBuffer = typing.Union[bytearray, memoryview]
_ReturnValue = typing.TypeVar("_ReturnValue")
SSL_BLOCKSIZE = ...
class SSLTransport:
    """
    The SSLTransport wraps an existing socket and establishes an SSL connection.

    Contrary to Python's implementation of SSLSocket, it allows you to chain
    multiple TLS connections together. It's particularly useful if you need to
    implement TLS within TLS.

    The class supports most of the socket API operations.
    """
    def __init__(self, socket: socket.socket, ssl_context: ssl.SSLContext, server_hostname: str | None = ..., suppress_ragged_eofs: bool = ...) -> None:
        """
        Create an SSLTransport around socket using the provided ssl_context.
        """
        ...
    
    def __enter__(self) -> Self:
        ...
    
    def __exit__(self, *_: typing.Any) -> None:
        ...
    
    def fileno(self) -> int:
        ...
    
    def read(self, len: int = ..., buffer: typing.Any | None = ...) -> int | bytes:
        ...
    
    def recv(self, buflen: int = ..., flags: int = ...) -> int | bytes:
        ...
    
    def recv_into(self, buffer: _WriteBuffer, nbytes: int | None = ..., flags: int = ...) -> None | int | bytes:
        ...
    
    def sendall(self, data: bytes, flags: int = ...) -> None:
        ...
    
    def send(self, data: bytes, flags: int = ...) -> int:
        ...
    
    def makefile(self, mode: str, buffering: int | None = ..., *, encoding: str | None = ..., errors: str | None = ..., newline: str | None = ...) -> typing.BinaryIO | typing.TextIO | socket.SocketIO:
        """
        Python's httpclient uses makefile and buffered io when reading HTTP
        messages and we need to support it.

        This is unfortunately a copy and paste of socket.py makefile with small
        changes to point to the socket directly.
        """
        ...
    
    def unwrap(self) -> None:
        ...
    
    def close(self) -> None:
        ...
    
    @typing.overload
    def getpeercert(self, binary_form: typing.Literal[False] = ...) -> _TYPE_PEER_CERT_RET_DICT | None:
        ...
    
    @typing.overload
    def getpeercert(self, binary_form: typing.Literal[True]) -> bytes | None:
        ...
    
    def getpeercert(self, binary_form: bool = ...) -> _TYPE_PEER_CERT_RET:
        ...
    
    def version(self) -> str | None:
        ...
    
    def cipher(self) -> tuple[str, str, int] | None:
        ...
    
    def selected_alpn_protocol(self) -> str | None:
        ...
    
    def shared_ciphers(self) -> list[tuple[str, str, int]] | None:
        ...
    
    def compression(self) -> str | None:
        ...
    
    def settimeout(self, value: float | None) -> None:
        ...
    
    def gettimeout(self) -> float | None:
        ...
    


