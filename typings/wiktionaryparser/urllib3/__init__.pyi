"""
This type stub file was generated by pyright.
"""

import datetime
import http.client
import logging
import os
import re
import socket
import sys
import threading
import typing
import warnings
import ssl
from http.client import HTTPConnection as _HTTPConnection, HTTPException as HTTPException, ResponseNotReady
from socket import timeout as SocketTimeout
from .response import HTTPResponse
from .util.ssl_ import _TYPE_PEER_CERT_RET_DICT, assert_fingerprint as _assert_fingerprint, create_urllib3_context, is_ipaddress, resolve_cert_reqs, resolve_ssl_version, ssl_wrap_socket
from .util.ssltransport import SSLTransport
from ._collections import HTTPHeaderDict
from .http2 import probe as http2_probe
from .util.response import assert_header_parsing
from .util.timeout import Timeout, _DEFAULT_TIMEOUT, _TYPE_TIMEOUT
from .util.util import to_str
from .util.wait import wait_for_read
from ._base_connection import ProxyConfig as ProxyConfig, _ResponseOptions as _ResponseOptions, _TYPE_BODY
from ._version import __version__
from .exceptions import ConnectTimeoutError, HeaderParsingError, NameResolutionError, NewConnectionError, ProxyError, SystemTimeWarning
from .util import SKIPPABLE_HEADERS, SKIP_HEADER, connection, ssl_
from .util.request import body_to_chunks
from .util.ssl_match_hostname import CertificateError, match_hostname
from .util.url import Url

if typing.TYPE_CHECKING:
    ...
BaseSSLError = ...
ConnectionError = ConnectionError
BrokenPipeError = BrokenPipeError
log = ...
port_by_scheme = ...
RECENT_DATE = ...
_CONTAINS_CONTROL_CHAR_RE = ...
class HTTPConnection(_HTTPConnection):
    """
    Based on :class:`http.client.HTTPConnection` but provides an extra constructor
    backwards-compatibility layer between older and newer Pythons.

    Additional keyword parameters are used to configure attributes of the connection.
    Accepted parameters include:

    - ``source_address``: Set the source address for the current connection.
    - ``socket_options``: Set specific options on the underlying socket. If not specified, then
      defaults are loaded from ``HTTPConnection.default_socket_options`` which includes disabling
      Nagle's algorithm (sets TCP_NODELAY to 1) unless the connection is behind a proxy.

      For example, if you wish to enable TCP Keep Alive in addition to the defaults,
      you might pass:

      .. code-block:: python

         HTTPConnection.default_socket_options + [
             (socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1),
         ]

      Or you may want to disable the defaults by passing an empty list (e.g., ``[]``).
    """
    default_port: typing.ClassVar[int] = ...
    default_socket_options: typing.ClassVar[connection._TYPE_SOCKET_OPTIONS] = ...
    is_verified: bool = ...
    proxy_is_verified: bool | None = ...
    blocksize: int
    source_address: tuple[str, int] | None
    socket_options: connection._TYPE_SOCKET_OPTIONS | None
    _has_connected_to_proxy: bool
    _response_options: _ResponseOptions | None
    _tunnel_host: str | None
    _tunnel_port: int | None
    _tunnel_scheme: str | None
    def __init__(self, host: str, port: int | None = ..., *, timeout: _TYPE_TIMEOUT = ..., source_address: tuple[str, int] | None = ..., blocksize: int = ..., socket_options: None | connection._TYPE_SOCKET_OPTIONS = ..., proxy: Url | None = ..., proxy_config: ProxyConfig | None = ...) -> None:
        ...
    
    @property
    def host(self) -> str:
        """
        Getter method to remove any trailing dots that indicate the hostname is an FQDN.

        In general, SSL certificates don't include the trailing dot indicating a
        fully-qualified domain name, and thus, they don't validate properly when
        checked against a domain name that includes the dot. In addition, some
        servers may not expect to receive the trailing dot when provided.

        However, the hostname with trailing dot is critical to DNS resolution; doing a
        lookup with the trailing dot will properly only resolve the appropriate FQDN,
        whereas a lookup without a trailing dot will search the system's search domain
        list. Thus, it's important to keep the original host around for use only in
        those cases where it's appropriate (i.e., when doing DNS lookup to establish the
        actual TCP connection across which we're going to send HTTP requests).
        """
        ...
    
    @host.setter
    def host(self, value: str) -> None:
        """
        Setter for the `host` property.

        We assume that only urllib3 uses the _dns_host attribute; httplib itself
        only uses `host`, and it seems reasonable that other libraries follow suit.
        """
        ...
    
    def set_tunnel(self, host: str, port: int | None = ..., headers: typing.Mapping[str, str] | None = ..., scheme: str = ...) -> None:
        ...
    
    if sys.version_info < (3, 11, 4):
        ...
    def connect(self) -> None:
        ...
    
    @property
    def is_closed(self) -> bool:
        ...
    
    @property
    def is_connected(self) -> bool:
        ...
    
    @property
    def has_connected_to_proxy(self) -> bool:
        ...
    
    @property
    def proxy_is_forwarding(self) -> bool:
        """
        Return True if a forwarding proxy is configured, else return False
        """
        ...
    
    @property
    def proxy_is_tunneling(self) -> bool:
        """
        Return True if a tunneling proxy is configured, else return False
        """
        ...
    
    def close(self) -> None:
        ...
    
    def putrequest(self, method: str, url: str, skip_host: bool = ..., skip_accept_encoding: bool = ...) -> None:
        """"""
        ...
    
    def putheader(self, header: str, *values: str) -> None:
        """"""
        ...
    
    def request(self, method: str, url: str, body: _TYPE_BODY | None = ..., headers: typing.Mapping[str, str] | None = ..., *, chunked: bool = ..., preload_content: bool = ..., decode_content: bool = ..., enforce_content_length: bool = ...) -> None:
        ...
    
    def request_chunked(self, method: str, url: str, body: _TYPE_BODY | None = ..., headers: typing.Mapping[str, str] | None = ...) -> None:
        """
        Alternative to the common request method, which sends the
        body with chunked encoding and not as one block
        """
        ...
    
    def getresponse(self) -> HTTPResponse:
        """
        Get the response from the server.

        If the HTTPConnection is in the correct state, returns an instance of HTTPResponse or of whatever object is returned by the response_class variable.

        If a request has not been sent or if a previous response has not be handled, ResponseNotReady is raised. If the HTTP response indicates that the connection should be closed, then it will be closed before the response is returned. When the connection is closed, the underlying socket is closed.
        """
        ...
    


class HTTPSConnection(HTTPConnection):
    """
    Many of the parameters to this constructor are passed to the underlying SSL
    socket by means of :py:func:`urllib3.util.ssl_wrap_socket`.
    """
    default_port = ...
    cert_reqs: int | str | None = ...
    ca_certs: str | None = ...
    ca_cert_dir: str | None = ...
    ca_cert_data: None | str | bytes = ...
    ssl_version: int | str | None = ...
    ssl_minimum_version: int | None = ...
    ssl_maximum_version: int | None = ...
    assert_fingerprint: str | None = ...
    _connect_callback: typing.Callable[..., None] | None = ...
    def __init__(self, host: str, port: int | None = ..., *, timeout: _TYPE_TIMEOUT = ..., source_address: tuple[str, int] | None = ..., blocksize: int = ..., socket_options: None | connection._TYPE_SOCKET_OPTIONS = ..., proxy: Url | None = ..., proxy_config: ProxyConfig | None = ..., cert_reqs: int | str | None = ..., assert_hostname: None | str | typing.Literal[False] = ..., assert_fingerprint: str | None = ..., server_hostname: str | None = ..., ssl_context: ssl.SSLContext | None = ..., ca_certs: str | None = ..., ca_cert_dir: str | None = ..., ca_cert_data: None | str | bytes = ..., ssl_minimum_version: int | None = ..., ssl_maximum_version: int | None = ..., ssl_version: int | str | None = ..., cert_file: str | None = ..., key_file: str | None = ..., key_password: str | None = ...) -> None:
        ...
    
    def set_cert(self, key_file: str | None = ..., cert_file: str | None = ..., cert_reqs: int | str | None = ..., key_password: str | None = ..., ca_certs: str | None = ..., assert_hostname: None | str | typing.Literal[False] = ..., assert_fingerprint: str | None = ..., ca_cert_dir: str | None = ..., ca_cert_data: None | str | bytes = ...) -> None:
        """
        This method should only be called once, before the connection is used.
        """
        ...
    
    def connect(self) -> None:
        ...
    


class _WrappedAndVerifiedSocket(typing.NamedTuple):
    """
    Wrapped socket and whether the connection is
    verified after the TLS handshake
    """
    socket: ssl.SSLSocket | SSLTransport
    is_verified: bool
    ...


class DummyConnection:
    """Used to detect a failed ConnectionCls import."""
    ...


if not ssl:
    HTTPSConnection = ...
VerifiedHTTPSConnection = HTTPSConnection
