"""
This type stub file was generated by pyright.
"""

import contextlib
import logging
import typing as t
import uuid
import comm
from traitlets.utils.importstring import import_item
from zmq.eventloop.zmqstream import ZMQStream

"""Default classes for Comm and CommManager, for usage in IPython.
"""
if t.TYPE_CHECKING:
    ...
logger = ...
MessageType = t.Dict[str, t.Any]
MaybeDict = t.Optional[t.Dict[str, t.Any]]
BuffersType = t.Optional[t.List[bytes]]
CommCallback = t.Callable[[MessageType], None]
CommTargetCallback = t.Callable[["BaseComm", MessageType], None]
class BaseComm:
    """Class for communicating between a Frontend and a Kernel

    Must be subclassed with a publish_msg method implementation which
    sends comm messages through the iopub channel.
    """
    def __init__(self, target_name: str = ..., data: MaybeDict = ..., metadata: MaybeDict = ..., buffers: BuffersType = ..., comm_id: str | None = ..., primary: bool = ..., target_module: str | None = ..., topic: bytes | None = ..., _open_data: MaybeDict = ..., _close_data: MaybeDict = ..., **kwargs: t.Any) -> None:
        ...
    
    def publish_msg(self, msg_type: str, data: MaybeDict = ..., metadata: MaybeDict = ..., buffers: BuffersType = ..., **keys: t.Any) -> None:
        ...
    
    def __del__(self) -> None:
        """trigger close on gc"""
        ...
    
    def open(self, data: MaybeDict = ..., metadata: MaybeDict = ..., buffers: BuffersType = ...) -> None:
        """Open the frontend-side version of this comm"""
        ...
    
    def close(self, data: MaybeDict = ..., metadata: MaybeDict = ..., buffers: BuffersType = ..., deleting: bool = ...) -> None:
        """Close the frontend-side version of this comm"""
        ...
    
    def send(self, data: MaybeDict = ..., metadata: MaybeDict = ..., buffers: BuffersType = ...) -> None:
        """Send a message to the frontend-side version of this comm"""
        ...
    
    def on_close(self, callback: CommCallback | None) -> None:
        """Register a callback for comm_close

        Will be called with the `data` of the close message.

        Call `on_close(None)` to disable an existing callback.
        """
        ...
    
    def on_msg(self, callback: CommCallback | None) -> None:
        """Register a callback for comm_msg

        Will be called with the `data` of any comm_msg messages.

        Call `on_msg(None)` to disable an existing callback.
        """
        ...
    
    def handle_close(self, msg: MessageType) -> None:
        """Handle a comm_close message"""
        ...
    
    def handle_msg(self, msg: MessageType) -> None:
        """Handle a comm_msg message"""
        ...
    


class CommManager:
    """Default CommManager singleton implementation for Comms in the Kernel"""
    def __init__(self) -> None:
        ...
    
    def register_target(self, target_name: str, f: CommTargetCallback | str) -> None:
        """Register a callable f for a given target name

        f will be called with two arguments when a comm_open message is received with `target`:

        - the Comm instance
        - the `comm_open` message itself.

        f can be a Python callable or an import string for one.
        """
        ...
    
    def unregister_target(self, target_name: str, f: CommTargetCallback) -> CommTargetCallback:
        """Unregister a callable registered with register_target"""
        ...
    
    def register_comm(self, comm: BaseComm) -> str:
        """Register a new comm"""
        ...
    
    def unregister_comm(self, comm: BaseComm) -> None:
        """Unregister a comm, and close its counterpart"""
        ...
    
    def get_comm(self, comm_id: str) -> BaseComm | None:
        """Get a comm with a particular id

        Returns the comm if found, otherwise None.

        This will not raise an error,
        it will log messages if the comm cannot be found.
        """
        ...
    
    def comm_open(self, stream: ZMQStream, ident: str, msg: MessageType) -> None:
        """Handler for comm_open messages"""
        ...
    
    def comm_msg(self, stream: ZMQStream, ident: str, msg: MessageType) -> None:
        """Handler for comm_msg messages"""
        ...
    
    def comm_close(self, stream: ZMQStream, ident: str, msg: MessageType) -> None:
        """Handler for comm_close messages"""
        ...
    


__all__ = ["CommManager", "BaseComm"]
